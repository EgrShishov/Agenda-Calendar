// <auto-generated />
using System;
using System.Collections.Generic;
using AgendaCalendar.Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgendaCalendar.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240406093919_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("CalendarDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("Subscribers")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int?>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("NotificationInterval")
                        .HasColumnType("interval");

                    b.Property<DateTime>("ReminderTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.Event", b =>
                {
                    b.HasOne("AgendaCalendar.Domain.Entities.Calendar", null)
                        .WithMany("Events")
                        .HasForeignKey("CalendarId");

                    b.OwnsOne("AgendaCalendar.Domain.Entities.RecurrenceRule", "ReccurenceRules", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("integer");

                            b1.Property<List<int>>("DaysOfMonth")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<int[]>("DaysOfWeek")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<int>("Frequency")
                                .HasColumnType("integer");

                            b1.Property<int>("Interval")
                                .HasColumnType("integer");

                            b1.Property<List<int>>("MonthsOfYear")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<List<int>>("WeeksOfMonth")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<int>("Year")
                                .HasColumnType("integer");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");

                            b1.OwnsOne("System.Collections.Generic.List<AgendaCalendar.Domain.Entities.TimePeriod>", "RecurrenceDates", b2 =>
                                {
                                    b2.Property<int>("RecurrenceRuleEventId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Capacity")
                                        .HasColumnType("integer");

                                    b2.HasKey("RecurrenceRuleEventId");

                                    b2.ToTable("Events");

                                    b2.WithOwner()
                                        .HasForeignKey("RecurrenceRuleEventId");
                                });

                            b1.Navigation("RecurrenceDates")
                                .IsRequired();
                        });

                    b.OwnsOne("System.Collections.Generic.List<AgendaCalendar.Domain.Entities.EventParticipant>", "EventParticipants", b1 =>
                        {
                            b1.Property<int>("EventId")
                                .HasColumnType("integer");

                            b1.Property<int>("Capacity")
                                .HasColumnType("integer");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("EventParticipants")
                        .IsRequired();

                    b.Navigation("ReccurenceRules")
                        .IsRequired();
                });

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("AgendaCalendar.Domain.Entities.Calendar", null)
                        .WithMany("Reminders")
                        .HasForeignKey("CalendarId");
                });

            modelBuilder.Entity("AgendaCalendar.Domain.Entities.Calendar", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
